// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hyV3Qh6omoZfLaxr2maQHq
// Component: jXtM3YjACR
import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Button from '../../Button'; // plasmic-import: l1cZrxXjGJlGQf/component

import { useScreenVariants as useScreenVariants_38ZwnZarMk9Gci } from './PlasmicGlobalVariant__Screen'; // plasmic-import: 38zwnZARMk9Gci/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_pi_xl_b.module.css'; // plasmic-import: hyV3Qh6omoZfLaxr2maQHq/projectcss
import sty from './PlasmicNavBar.module.css'; // plasmic-import: jXtM3YjACR/css

import ChecksvgIcon from './icons/PlasmicIcon__Checksvg'; // plasmic-import: QqqMrdFXzVjwWb/icon
import Icon4Icon from './icons/PlasmicIcon__Icon4'; // plasmic-import: OSUzn4xWLpgWdF/icon
import logoPixlFinalpng1ZD2FlguY from './images/logoPixlFinalpng.png'; // plasmic-import: 1zD2FlguY/picture

export type PlasmicNavBar__VariantMembers = {
  synced: 'synced';
};

export type PlasmicNavBar__VariantsArgs = {
  synced?: SingleBooleanChoiceArg<'synced'>;
};

type VariantPropType = keyof PlasmicNavBar__VariantsArgs;
export const PlasmicNavBar__VariantProps = new Array<VariantPropType>('synced');

export type PlasmicNavBar__ArgsType = {};
type ArgPropType = keyof PlasmicNavBar__ArgsType;
export const PlasmicNavBar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavBar__OverridesType = {
  root?: p.Flex<'header'>;
  logoWrap?: p.Flex<'a'>;
  logo?: p.Flex<typeof p.PlasmicImg>;
  navmenu?: p.Flex<'div'>;
  link3?: p.Flex<'a'>;
  about?: p.Flex<'a'>;
  link4?: p.Flex<'a'>;
  navBarButtonBlock?: p.Flex<'div'>;
  syncButton?: p.Flex<typeof Button>;
  btnText?: p.Flex<'div'>;
};

export interface DefaultNavBarProps {
  synced?: SingleBooleanChoiceArg<'synced'>;
  className?: string;
}

function PlasmicNavBar__RenderFunc(props: {
  variants: PlasmicNavBar__VariantsArgs;
  args: PlasmicNavBar__ArgsType;
  overrides: PlasmicNavBar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_38ZwnZarMk9Gci(),
  });

  return (
    <header
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <a
        data-plasmic-name={'logoWrap'}
        data-plasmic-override={overrides.logoWrap}
        className={classNames(projectcss.all, projectcss.a, sty.logoWrap)}
        href={'/' as const}
      >
        <p.PlasmicImg
          data-plasmic-name={'logo'}
          data-plasmic-override={overrides.logo}
          alt={''}
          className={classNames(sty.logo)}
          displayHeight={'auto' as const}
          displayMaxHeight={'none' as const}
          displayMaxWidth={'220px' as const}
          displayMinHeight={'0' as const}
          displayMinWidth={'0' as const}
          displayWidth={'auto' as const}
          loading={'lazy' as const}
          src={{
            src: logoPixlFinalpng1ZD2FlguY,
            fullWidth: 750,
            fullHeight: 750,
            aspectRatio: undefined,
          }}
        />
      </a>

      {true ? (
        <div
          data-plasmic-name={'navmenu'}
          data-plasmic-override={overrides.navmenu}
          className={classNames(projectcss.all, sty.navmenu)}
        >
          <a
            data-plasmic-name={'link3'}
            data-plasmic-override={overrides.link3}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link3
            )}
            href={'/' as const}
          >
            {'Home'}
          </a>

          <a
            data-plasmic-name={'about'}
            data-plasmic-override={overrides.about}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.about
            )}
            href={'/about' as const}
          >
            {'About'}
          </a>

          <a
            data-plasmic-name={'link4'}
            data-plasmic-override={overrides.link4}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link4
            )}
            href={'https://objkt.com/profile/pixl/collections' as const}
          >
            {'Store'}
          </a>
        </div>
      ) : null}

      <div
        data-plasmic-name={'navBarButtonBlock'}
        data-plasmic-override={overrides.navBarButtonBlock}
        className={classNames(projectcss.all, sty.navBarButtonBlock)}
      >
        <Button
          data-plasmic-name={'syncButton'}
          data-plasmic-override={overrides.syncButton}
          className={classNames('__wab_instance', sty.syncButton, {
            [sty.syncButtonsynced]: hasVariant(variants, 'synced', 'synced'),
          })}
          color={'red' as const}
          link={'/play' as const}
          shape={'rounded' as const}
        >
          <div
            data-plasmic-name={'btnText'}
            data-plasmic-override={overrides.btnText}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.btnText,
              { [sty.btnTextsynced]: hasVariant(variants, 'synced', 'synced') }
            )}
          >
            {hasVariant(variants, 'synced', 'synced')
              ? 'UnSync '
              : 'Sync Wallet'}
          </div>
        </Button>
      </div>
    </header>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'logoWrap',
    'logo',
    'navmenu',
    'link3',
    'about',
    'link4',
    'navBarButtonBlock',
    'syncButton',
    'btnText',
  ],
  logoWrap: ['logoWrap', 'logo'],
  logo: ['logo'],
  navmenu: ['navmenu', 'link3', 'about', 'link4'],
  link3: ['link3'],
  about: ['about'],
  link4: ['link4'],
  navBarButtonBlock: ['navBarButtonBlock', 'syncButton', 'btnText'],
  syncButton: ['syncButton', 'btnText'],
  btnText: ['btnText'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'header';
  logoWrap: 'a';
  logo: typeof p.PlasmicImg;
  navmenu: 'div';
  link3: 'a';
  about: 'a';
  link4: 'a';
  navBarButtonBlock: 'div';
  syncButton: typeof Button;
  btnText: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavBar__VariantsArgs;
    args?: PlasmicNavBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavBar__ArgProps,
          internalVariantPropNames: PlasmicNavBar__VariantProps,
        }),
      [props, nodeName]
    );

    return PlasmicNavBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicNavBar';
  } else {
    func.displayName = `PlasmicNavBar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBar = Object.assign(
  // Top-level PlasmicNavBar renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    logoWrap: makeNodeComponent('logoWrap'),
    logo: makeNodeComponent('logo'),
    navmenu: makeNodeComponent('navmenu'),
    link3: makeNodeComponent('link3'),
    about: makeNodeComponent('about'),
    link4: makeNodeComponent('link4'),
    navBarButtonBlock: makeNodeComponent('navBarButtonBlock'),
    syncButton: makeNodeComponent('syncButton'),
    btnText: makeNodeComponent('btnText'),

    // Metadata about props expected for PlasmicNavBar
    internalVariantProps: PlasmicNavBar__VariantProps,
    internalArgProps: PlasmicNavBar__ArgProps,
  }
);

export default PlasmicNavBar;
/* prettier-ignore-end */
